///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package program_repo

import (
	"fmt"
	"time"

	"exams-api/internal/api/repository/db_repo"

	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Program {
	return new(Program)
}

func NewQueryBuilder() *programRepoQueryBuilder {
	return new(programRepoQueryBuilder)
}

func (t *Program) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

func (t *Program) Delete(db *gorm.DB) (err error) {
	if err = db.Delete(t).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (t *Program) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = db.Model(&Program{}).Where("id = ?", t.Id).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

type programRepoQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *programRepoQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *programRepoQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Program{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *programRepoQueryBuilder) First(db *gorm.DB) (*Program, error) {
	ret := &Program{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *programRepoQueryBuilder) QueryOne(db *gorm.DB) (*Program, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *programRepoQueryBuilder) QueryAll(db *gorm.DB) ([]*Program, error) {
	var ret []*Program
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *programRepoQueryBuilder) Limit(limit int) *programRepoQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *programRepoQueryBuilder) Offset(offset int) *programRepoQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *programRepoQueryBuilder) WhereId(p db_repo.Predicate, value int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereIdIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereIdNotIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderById(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereName(p db_repo.Predicate, value string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereNameIn(value []string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereNameNotIn(value []string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByName(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "name "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereSlogan(p db_repo.Predicate, value string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "slogan", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereSloganIn(value []string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "slogan", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereSloganNotIn(value []string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "slogan", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderBySlogan(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "slogan "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereCoverUrl(p db_repo.Predicate, value string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cover_url", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereCoverUrlIn(value []string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cover_url", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereCoverUrlNotIn(value []string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "cover_url", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByCoverUrl(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "cover_url "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WherePerformerCount(p db_repo.Predicate, value int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "performer_count", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WherePerformerCountIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "performer_count", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WherePerformerCountNotIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "performer_count", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByPerformerCount(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "performer_count "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereEnrollPriceInCoin(p db_repo.Predicate, value int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "enroll_price_in_coin", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereEnrollPriceInCoinIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "enroll_price_in_coin", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereEnrollPriceInCoinNotIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "enroll_price_in_coin", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByEnrollPriceInCoin(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "enroll_price_in_coin "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereCreatedAt(p db_repo.Predicate, value time.Time) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereCreatedAtIn(value []time.Time) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereCreatedAtNotIn(value []time.Time) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByCreatedAt(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereType(p db_repo.Predicate, value int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereTypeIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereTypeNotIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByType(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "type "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereOrder(p db_repo.Predicate, value int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereOrderIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereOrderNotIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "order", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByOrder(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "order "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereOfficial(p db_repo.Predicate, value int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "official", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereOfficialIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "official", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereOfficialNotIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "official", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByOfficial(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "official "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereIsDeleted(p db_repo.Predicate, value int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereIsDeletedIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereIsDeletedNotIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_deleted", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByIsDeleted(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_deleted "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereTags(p db_repo.Predicate, value string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "tags", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereTagsIn(value []string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "tags", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereTagsNotIn(value []string) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "tags", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByTags(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "tags "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereMarking(p db_repo.Predicate, value int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "marking", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereMarkingIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "marking", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereMarkingNotIn(value []int32) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "marking", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByMarking(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "marking "+order)
	return qb
}

func (qb *programRepoQueryBuilder) WhereUpdatedAt(p db_repo.Predicate, value time.Time) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereUpdatedAtIn(value []time.Time) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) WhereUpdatedAtNotIn(value []time.Time) *programRepoQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *programRepoQueryBuilder) OrderByUpdatedAt(asc bool) *programRepoQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}
